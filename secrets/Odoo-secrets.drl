package secrets

import com.stratio.tais.persistence.model.ServiceDeployment;
import com.stratio.tais.persistence.model.service.ServiceConfiguration;
import com.stratio.tais.persistence.model.ServiceConfigurationParameter;
import com.stratio.tais.persistence.model.ServiceDeploymentParameter;
import com.stratio.tais.persistence.model.ConceptState
import com.stratio.tais.persistence.model.secret.CertificateSecretRequest
import com.stratio.tais.persistence.model.secret.PasswordSecretRequest
import com.stratio.tais.senses.service.RandomStringGenerator
import com.stratio.tais.service.util.UniverseUtils
import com.stratio.tais.senses.utils.VaultUtils

rule "Deployment - Secrets apps-internas-pre"
salience 1000
when
  $deploymentService: ServiceDeployment(
    deploymentState == ServiceDeployment.STATE_CREATING_DEPLOYMENT,
    $serviceDeploymentGlobalId: uuid,
    serviceConfiguration != null,
    serviceConfiguration.serviceName != null,
    serviceConfiguration.serviceName == "apps-internas-pre",
    secretsCreated == false)
  $serviceConfiguration: ServiceConfiguration(
    $serviceConfigurationGlobalId: uuid, state  == ConceptState.LEARNED,
    uuid == $deploymentService.serviceConfigurationGlobalId)
  $serviceConfParameter: ServiceConfigurationParameter(
    parent == $serviceConfigurationGlobalId,
    internalName == UniverseUtils.PARAM_SERVICE_ID, $name: name)
  $seviceDeploymentParameter: ServiceDeploymentParameter(
    parent == $serviceDeploymentGlobalId, name == $name)
then
  String identity = VaultUtils.sanitizeSecretIdentity($seviceDeploymentParameter.getValue());
  String identityWithPath = VaultUtils.sanitizeSecretIdentityWithPath($seviceDeploymentParameter.getValue());

  System.out.println("Generating apps-internas-preUsers passwords...");
  PasswordSecretRequest keystore = new PasswordSecretRequest("userland/passwords/".concat(identity),
    "keystore", null, RandomStringGenerator.randomString(10));
  keystore.setParent($serviceDeploymentGlobalId);
  insert(keystore);

  System.out.println("Generating apps-internas-preUsers certificates...");
  CertificateSecretRequest cert = new CertificateSecretRequest("userland/certificates/".concat(identity),
  identity, identity, identityWithPath + ".marathon.mesos," + identityWithPath + "," + identity);
  cert.setParent($serviceDeploymentGlobalId);
  insert(cert);

  $deploymentService.setSecretsCreated(true);
  update($deploymentService);
end